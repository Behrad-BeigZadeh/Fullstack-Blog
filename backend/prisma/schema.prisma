// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CategoryName {
  PROGRAMMING
  DESIGN
  LIFESTYLE
  TECH
  PERSONAL
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id           String     @id @default(uuid())
  refreshToken String?
  email        String     @unique
  username     String     @unique
  password     String
  posts        Post[]
  comments     Comment[]
  reactions    Reaction[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Post {
  id            String       @id @default(uuid())
  title         String
  content       String
  slug          String       @unique
  coverImage    String
  imagePublicId String?
  published     Boolean      @default(false)
  category      CategoryName
  author        User         @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  reactions     Reaction[]
  likeCount     Int          @default(0)
  dislikeCount  Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Reaction {
  id        String       @id @default(uuid())
  type      ReactionType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime     @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}
